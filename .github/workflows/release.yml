name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        coverage: xdebug

    - name: Install dependencies
      run: composer install --dev

    - name: Run full test suite
      run: |
        echo "Running comprehensive tests before release..."
        vendor/bin/phpunit tests/unit/TestBasicFunctionality.php tests/unit/TestRSLLicense.php
        echo "✅ All tests passed"

    - name: Generate coverage report
      run: |
        vendor/bin/phpunit --coverage-clover coverage.xml tests/unit/TestBasicFunctionality.php tests/unit/TestRSLLicense.php
        echo "Coverage report generated"

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install production dependencies
      run: composer install --no-dev --optimize-autoloader

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Update plugin version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update main plugin file
        sed -i "s/Version: .*/Version: $VERSION/" rsl-wp.php
        sed -i "s/RSL_PLUGIN_VERSION\", \".*\"/RSL_PLUGIN_VERSION\", \"$VERSION\"/" rsl-wp.php
        
        echo "Updated plugin version to: $VERSION"

    - name: Create production ZIP
      id: create_zip
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        ZIP_NAME="rsl-licensing-$VERSION.zip"
        
        # Create clean directory for plugin
        mkdir -p /tmp/rsl-licensing
        
        # Copy production files only
        rsync -av \
          --exclude='.git*' \
          --exclude='tests/' \
          --exclude='docs/' \
          --exclude='coverage/' \
          --exclude='test-logs/' \
          --exclude='test-report.html' \
          --exclude='.phpunit*' \
          --exclude='phpunit.xml' \
          --exclude='composer.json' \
          --exclude='composer.lock' \
          --exclude='AGENTS.md' \
          --exclude='node_modules/' \
          --exclude='.DS_Store' \
          --exclude='*.log' \
          ./ /tmp/rsl-licensing/
        
        # Verify required files are present
        test -f /tmp/rsl-licensing/rsl-wp.php || { echo "Main plugin file missing"; exit 1; }
        test -d /tmp/rsl-licensing/includes/ || { echo "Includes directory missing"; exit 1; }
        test -d /tmp/rsl-licensing/vendor/ || { echo "Vendor directory missing"; exit 1; }
        
        # Create ZIP
        cd /tmp
        zip -r "$ZIP_NAME" rsl-licensing/
        mv "$ZIP_NAME" "$GITHUB_WORKSPACE/"
        
        # Verify ZIP integrity
        unzip -t "$GITHUB_WORKSPACE/$ZIP_NAME"

        # Calculate size
        SIZE=$(stat -c%s "$GITHUB_WORKSPACE/$ZIP_NAME")
        SIZE_MB=$(( SIZE / 1024 / 1024 ))

        # Generate checksums
        cd "$GITHUB_WORKSPACE"
        sha256sum "$ZIP_NAME" > "$ZIP_NAME.sha256"
        md5sum "$ZIP_NAME" > "$ZIP_NAME.md5"

        echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
        echo "zip_size=$SIZE" >> $GITHUB_OUTPUT
        echo "zip_size_mb=$SIZE_MB" >> $GITHUB_OUTPUT

        echo "Created $ZIP_NAME (${SIZE_MB}MB)"
        echo "Generated checksums:"
        cat "$ZIP_NAME.sha256"
        cat "$ZIP_NAME.md5"

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Extract changelog for this version from README.md
        if grep -A 20 "### $VERSION\|## $VERSION" README.md | head -20 > release_notes.md; then
          echo "Generated release notes from README.md"
        else
          # Fallback to git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"* %s (%h)" $LAST_TAG..HEAD >> release_notes.md
          else
            echo "## RSL for WordPress $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "Complete Really Simple Licensing implementation for WordPress." >> release_notes.md
          fi
        fi
        
        # Add technical details
        cat >> release_notes.md << EOF
        
        ## Technical Details
        
        * **Plugin Version:** $VERSION
        * **Requires WordPress:** 5.0 or higher
        * **Requires PHP:** 7.4 or higher
        * **Tested up to WordPress:** 6.4
        * **Archive Size:** ${{ steps.create_zip.outputs.zip_size_mb }}MB
        
        ## Security
        
        * ✅ All dependencies scanned for vulnerabilities
        * ✅ Code reviewed for security best practices
        * ✅ OAuth 2.0 implementation follows RFC standards
        * ✅ JWT tokens properly signed and validated
        
        ## Checksums
        
        * **SHA256:** \`$(sha256sum ${{ steps.create_zip.outputs.zip_name }} | cut -d' ' -f1)\`
        * **MD5:** \`$(md5sum ${{ steps.create_zip.outputs.zip_name }} | cut -d' ' -f1)\`
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "RSL for WordPress v${{ steps.version.outputs.version }}"
        files: |
          ${{ steps.create_zip.outputs.zip_name }}
          ${{ steps.create_zip.outputs.zip_name }}.sha256
          ${{ steps.create_zip.outputs.zip_name }}.md5
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: true
        tag_name: ${{ github.ref }}
        target_commitish: ${{ github.sha }}
        make_latest: ${{ !contains(steps.version.outputs.version, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Trigger WordPress.org deployment
      if: "!contains(steps.version.outputs.version, '-')" # Only for stable releases
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: wordpress-deploy
        client-payload: '{"version": "${{ steps.version.outputs.version }}"}'